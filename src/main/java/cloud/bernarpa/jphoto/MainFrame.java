/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cloud.bernarpa.jphoto;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.SwingUtilities;

/**
 *
 * @author rnd
 */
public class MainFrame extends javax.swing.JFrame {

    private PhotoOrganizer photoImporter;
    private final Path configFile;
    public AtomicBoolean closing = new AtomicBoolean(false);

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/cloud/bernarpa/jphoto/bernardi.png")));
        configFile = Path.of(System.getProperty("user.home") + System.getProperty("file.separator") + "jPhoto.properties");
        if (Files.exists(configFile)) {
            try ( InputStream input = new FileInputStream(configFile.toString())) {
                Properties prop = new Properties();
                prop.load(input);
                tfPhotoCollectionDirectory.setText(prop.getProperty("directory.collection"));
                tfPhotoImportDirectory.setText(prop.getProperty("directory.import"));
                String x = prop.getProperty("window.x");
                String y = prop.getProperty("window.y");
                if (x != null && y != null) {
                    setLocation(Integer.parseInt(x), Integer.parseInt(y));
                }
                String w = prop.getProperty("window.width");
                String h = prop.getProperty("window.height");
                if (w != null && h != null) {
                    setSize(Integer.parseInt(w), Integer.parseInt(h));
                }
            } catch (IOException ex) {
                showMessageDialog(null, ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel lbPhotoCollectionDirectory = new javax.swing.JLabel();
        tfPhotoCollectionDirectory = new javax.swing.JTextField();
        btPhotoCollectionDirectory = new javax.swing.JButton();
        javax.swing.JLabel lbPhotoImportDirectory = new javax.swing.JLabel();
        tfPhotoImportDirectory = new javax.swing.JTextField();
        btPhotoImportDirectory = new javax.swing.JButton();
        btImport = new javax.swing.JButton();
        pbImport = new javax.swing.JProgressBar();
        lbStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenuItem miExit = new javax.swing.JMenuItem();
        javax.swing.JMenu jMenu2 = new javax.swing.JMenu();
        javax.swing.JMenuItem miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BERNACON Photo Organizer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lbPhotoCollectionDirectory.setText("Photo collection directory");

        btPhotoCollectionDirectory.setText("...");
        btPhotoCollectionDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPhotoCollectionDirectoryActionPerformed(evt);
            }
        });

        lbPhotoImportDirectory.setText("Photo import directory");

        btPhotoImportDirectory.setText("...");
        btPhotoImportDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPhotoImportDirectoryActionPerformed(evt);
            }
        });

        btImport.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        btImport.setText("Organize");
        btImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportActionPerformed(evt);
            }
        });

        pbImport.setString("");
        pbImport.setStringPainted(true);

        lbStatus.setText("   ");

        jMenu1.setText("File");

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        jMenu2.add(miAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPhotoCollectionDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPhotoImportDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfPhotoImportDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(tfPhotoCollectionDirectory))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(btPhotoCollectionDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btPhotoImportDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lbStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPhotoCollectionDirectory)
                    .addComponent(tfPhotoCollectionDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPhotoCollectionDirectory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPhotoImportDirectory)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfPhotoImportDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btPhotoImportDirectory)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbImport, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbStatus))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportActionPerformed
        try {
            String dirCollection = tfPhotoCollectionDirectory.getText();
            String dirImport = tfPhotoImportDirectory.getText();
            photoImporter = new PhotoOrganizer(dirCollection, dirImport);
            // Uncomment this and comment below to test the date/time detection
            // Also, remember to set PhotoOrganizer.PRINT to true
            //Metadata meta = ImageMetadataReader.readMetadata(new File("D:\\DUMP_PHOTOS_HERE\\NoExif\\VID_20220721_202105.mp4"));
            //photoImporter.getDateTime(meta);
            final MainFrame that = this;
            new Thread(() -> {
                try {
                    photoImporter.organizePhotos(that);
                } catch (Exception ex) {
                    System.err.println("Import thread exception");
                    showMessageDialog(null, ex.getMessage());
                    System.err.println(ex);
                    ex.printStackTrace();
                }
            }).start();
        } catch (Exception ex) {
            System.err.println("Import setup exception");
            showMessageDialog(null, ex.getMessage());
            System.err.println(ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btImportActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        closing.set(true);
        System.out.println("Storing properties into " + configFile);
        try (OutputStream out = new FileOutputStream(configFile.toString())) {
            Properties prop = new Properties();
            prop.setProperty("directory.collection", tfPhotoCollectionDirectory.getText());
            prop.setProperty("directory.import", tfPhotoImportDirectory.getText());
            Point location = getLocation();
            prop.setProperty("window.x", Integer.toString(location.x));
            prop.setProperty("window.y", Integer.toString(location.y));
            Dimension size = getSize();
            prop.setProperty("window.width", Integer.toString(size.width));
            prop.setProperty("window.height", Integer.toString(size.height));
            prop.store(out, null);
        } catch (IOException ex) {
            showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_formWindowClosed

    private void btPhotoCollectionDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPhotoCollectionDirectoryActionPerformed
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.showSaveDialog(null);
        f.setAcceptAllFileFilterUsed(false);
        if (f.getSelectedFile() != null)
            tfPhotoCollectionDirectory.setText(f.getSelectedFile().toString());
    }//GEN-LAST:event_btPhotoCollectionDirectoryActionPerformed

    private void btPhotoImportDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPhotoImportDirectoryActionPerformed
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.showSaveDialog(null);
        f.setAcceptAllFileFilterUsed(false);
        if (f.getSelectedFile() != null)
            tfPhotoImportDirectory.setText(f.getSelectedFile().toString());
    }//GEN-LAST:event_btPhotoImportDirectoryActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_miExitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    public void setProgressBar(int min, int max, int value, String message) {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setProgressBar(min, max, value, message);
            });
        }
        pbImport.setMinimum(min);
        pbImport.setMaximum(max);
        pbImport.setValue(value);
        pbImport.setString(message);
    }
    
    public void resetProgressBar() {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                resetProgressBar();
            });
        }
        pbImport.setValue(0);
        pbImport.setString("");
        btImport.setEnabled(true);
    }
    
    public void setStatusMessage(String message) {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setStatusMessage(message);
            });
        }
        lbStatus.setText(message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btImport;
    private javax.swing.JButton btPhotoCollectionDirectory;
    private javax.swing.JButton btPhotoImportDirectory;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JProgressBar pbImport;
    private javax.swing.JTextField tfPhotoCollectionDirectory;
    private javax.swing.JTextField tfPhotoImportDirectory;
    // End of variables declaration//GEN-END:variables
}
